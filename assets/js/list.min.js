/*
表單無障礙互動注意事項：
1. 可被TAB選取的物件需要依照DOM的順序來FOCUS
2. 所有可被TAB選取的物件，如果在VIEWPORT中不可見，則不應該被FOCUS
3. 呈2.不可被 FOCUS元素需要 加上 tabindex="-1" 以及 aria-disabled="true"，並在可見時移除這兩個屬性
4. 包含沒有被切換到的頁籤、收合的項目、點選才會展開的抽屜，都必須要處理 tabindex
5. 少數特殊的狀況下，需使用 tabindex="1" 來強制設定順序。但這樣的情況應該要避免
*/
const twoColum = document.querySelector('#layoutCardTwo')
if(twoColum){
	document.querySelector('#layoutCardTwo').addEventListener('click', function () {
    // 將 body 加入 twoColum 的 class
    document.body.classList.add('twoColumn');

    // 將 #layoutCardTwo 按鈕加入 active class
    this.classList.add('active');

    // 將 #layoutCard 移除 active class
    const layoutCard = document.getElementById('layoutCard');
    if (layoutCard) {
        layoutCard.classList.remove('active');
    }
});
}

const FilterManager = {
  init() {
    // 選取所有 .result-all-item 容器
    const containers = document.querySelectorAll('.result-all-item');
    containers.forEach(container => this.setupContainer(container));
  },

  setupContainer(container) {
    // 選取容器內的 radio 和 button
    const radios = container.querySelectorAll('.items label[data-type] input[type="radio"]');
    const buttons = container.querySelectorAll('.result-right.levels .level .items button');
    const labels = container.querySelectorAll('.items label[data-type]');

    // 為每個 radio 綁定 change 事件
    radios.forEach(radio => {
      radio.addEventListener('change', () => this.handleFilterChange(container, buttons));
    });

    // 為每個 label 綁定 keydown 事件以支援 Enter 鍵
    labels.forEach(label => {
      label.addEventListener('keydown', (event) => {
        if (event.key === 'Enter' || event.keyCode === 13) {
          event.preventDefault(); // 防止 Enter 觸發其他行為（如表單提交）
          const radio = label.querySelector('input[type="radio"]');
          if (radio && !radio.checked) {
            radio.checked = true; // 選中 radio
            radio.dispatchEvent(new Event('change', { bubbles: true })); // 觸發 change 事件
          }
        }
      });
    });
  },

  handleFilterChange(container, buttons) {
    // 選取容器內當前選中的 radio
    const selectedRadio = container.querySelector('.items label[data-type] input[type="radio"]:checked');
    const selectedTag = selectedRadio ? selectedRadio.parentElement.getAttribute('data-type') : null;

    // 處理按鈕顯示邏輯
    buttons.forEach(button => {
      const shouldShow = !selectedTag || selectedTag === 'filter-all' || button.classList.contains(selectedTag);

      if (shouldShow) {
        button.classList.remove('hidden');
        button.removeAttribute('tabindex');
        button.removeAttribute('aria-hidden');
      } else {
        button.classList.add('hidden');
        button.setAttribute('tabindex', '-1');
        button.setAttribute('aria-hidden', 'true');
      }
    });
  }
};

document.addEventListener('DOMContentLoaded', () => {
  FilterManager.init();
});

const resultPanelBtn = document.querySelector('#resultPanelBtn');
if(resultPanelBtn){
	resultPanelBtn.addEventListener('click', (e) => {
		e.preventDefault();
		e.currentTarget.parentElement.classList.toggle('active');
	});
}

// 互動功能：BOOTSTRAP 原生 Modal POPUP
const polygons = document.querySelectorAll('#pageGIS polygon');
polygons.forEach(polygon => {
		polygon.addEventListener('click', (e) => {
				const id = e.target.getAttribute('data-id');
				const info = e.target.getAttribute('data-info');
		});

		// 鍵盤事件：Enter 或 Space 觸發
		polygon.addEventListener('keydown', (e) => {
				if (e.key === 'Enter' || e.key === ' ') {
						e.preventDefault();
						const id = e.target.getAttribute('data-id');
						const info = e.target.getAttribute('data-info');
						// alert(`鍵盤觸發 ${info} (ID: ${id})`);
				}
		});
});

// 互動功能：展開搜尋結果
const resulTarget = document.querySelector('#resultPanel');
const resultPanelToggle = document.querySelector('#resultPanelToggle');
const resulSend = document.querySelector('#send');
const moreOptionTaget = document.querySelector('#filterPanel');
const moreOptioninputs = document.querySelectorAll('.disabledCheck');

if(resulSend && resultPanelToggle && resulTarget){
	resulSend.addEventListener('click', () => {
		resulSend.blur(); // 讓點擊的按鈕失去焦點
		document.activeElement.blur(); // 讓當前聚焦的元素（例如表單輸入框）失去焦點
		resulTarget.classList.toggle('active');
		resultPanelBtn.classList.add('active');
	});
}

// === 初始設置所有 disabledCheck 元素
moreOptioninputs.forEach(ta => {
	ta.setAttribute('tabindex', '-1');
	ta.setAttribute('aria-disabled', 'true');
});

if(resulTarget){
	resulTarget.addEventListener('click', () => {
		moreOptionTaget.classList.remove('active');
	});
}

if(moreOptionTaget){
	moreOptionTaget.addEventListener('click', (event) => {
    if (event.target.closest('#resultPanelBtn')) {
      // 當點擊 #BTN 時執行的行為
      moreOptionTaget.classList.remove('active'); // 例如移除 active 類
    } else {
      // 當點擊 #filterPanel 或其他子元素（包括 LABEL）時執行的行為
      moreOptionTaget.classList.add('active');
    }
  });
}