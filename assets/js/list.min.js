/*
表單無障礙互動注意事項：
1. 可被TAB選取的物件需要依照DOM的順序來FOCUS
2. 所有可被TAB選取的物件，如果在VIEWPORT中不可見，則不應該被FOCUS
3. 呈2.不可被 FOCUS元素需要 加上 tabindex="-1" 以及 aria-disabled="true"，並在可見時移除這兩個屬性
4. 包含沒有被切換到的頁籤、收合的項目、點選才會展開的抽屜，都必須要處理 tabindex
5. 少數特殊的狀況下，需使用 tabindex="1" 來強制設定順序。但這樣的情況應該要避免
*/
const twoColum = document.querySelector('#layoutCardTwo')
if(twoColum){
	document.querySelector('#layoutCardTwo').addEventListener('click', function () {
    // 將 body 加入 twoColum 的 class
    document.body.classList.add('twoColumn');

    // 將 #layoutCardTwo 按鈕加入 active class
    this.classList.add('active');

    // 將 #layoutCard 移除 active class
    const layoutCard = document.getElementById('layoutCard');
    if (layoutCard) {
        layoutCard.classList.remove('active');
    }
});
}

const FilterManager = {
  init() {
    // 選取所有 .result-all-item 容器
    const containers = document.querySelectorAll('.result-all-item');
    containers.forEach(container => this.setupContainer(container));
  },

  setupContainer(container) {
    // 選取容器內的 radio 和 button
    const radios = container.querySelectorAll('.items label[data-type] input[type="radio"]');
    const buttons = container.querySelectorAll('.result-right.levels .level .items button');
    const labels = container.querySelectorAll('.items label[data-type]');

    // 為每個 radio 綁定 change 事件
    radios.forEach(radio => {
      radio.addEventListener('change', () => this.handleFilterChange(container, buttons));
    });

    // 為每個 label 綁定 keydown 事件以支援 Enter 鍵
    labels.forEach(label => {
      label.addEventListener('keydown', (event) => {
        if (event.key === 'Enter' || event.keyCode === 13) {
          event.preventDefault(); // 防止 Enter 觸發其他行為（如表單提交）
          const radio = label.querySelector('input[type="radio"]');
          if (radio && !radio.checked) {
            radio.checked = true; // 選中 radio
            radio.dispatchEvent(new Event('change', { bubbles: true })); // 觸發 change 事件
          }
        }
      });
    });
  },

  handleFilterChange(container, buttons) {
    // 選取容器內當前選中的 radio
    const selectedRadio = container.querySelector('.items label[data-type] input[type="radio"]:checked');
    const selectedTag = selectedRadio ? selectedRadio.parentElement.getAttribute('data-type') : null;

    // 處理按鈕顯示邏輯
    buttons.forEach(button => {
      const shouldShow = !selectedTag || selectedTag === 'filter-all' || button.classList.contains(selectedTag);

      if (shouldShow) {
        button.classList.remove('hidden');
        button.removeAttribute('tabindex');
        button.removeAttribute('aria-hidden');
      } else {
        button.classList.add('hidden');
        button.setAttribute('tabindex', '-1');
        button.setAttribute('aria-hidden', 'true');
      }
    });
  }
};

document.addEventListener('DOMContentLoaded', () => {
  FilterManager.init();
});

// 統一管理結果面板和篩選面板的互動
const PanelManager = {
  elements: {
    content: null,
    resultPanel: null,
    resultPanelBtn: null,
    resultPanelToggle: null,
    sendButton: null,
    filterPanel: null,
    disabledChecks: []
  },

  init() {
    // 取得所有需要的元素
    this.elements.content = document.querySelector('#content');
    this.elements.resultPanel = document.querySelector('#resultPanel');
    this.elements.resultPanelBtn = document.querySelector('#resultPanelBtn');
    this.elements.resultPanelToggle = document.querySelector('#resultPanelToggle');
    this.elements.sendButton = document.querySelector('#send');
    this.elements.filterPanel = document.querySelector('#filterPanel');
    this.elements.disabledChecks = document.querySelectorAll('.disabledCheck');

    // 檢查必要元素是否存在
    if (!this.elements.content) return;

    // 初始化元素屬性
    this.initElements();

    // 設置事件監聽器
    this.setupEventListeners();
  },

  initElements() {
    // 初始設置所有 disabledCheck 元素
    this.elements.disabledChecks.forEach(element => {
      element.setAttribute('tabindex', '-1');
      element.setAttribute('aria-disabled', 'true');
    });
		// 強制關掉收合按鈕，不讓CSS控制
		this.elements.resultPanelBtn.style.display = 'none';
  },

  setupEventListeners() {
    // 為 content 設置點擊事件
    this.elements.content.addEventListener('click', (e) => {
      // 在點擊 content 時關閉所有面板
      if (!e.target.closest('#resultPanel') &&
          !e.target.closest('#resultPanelToggle') &&
          !e.target.closest('#filterPanel')) {
        // 點擊的是 content 區域，但不是面板或相關按鈕
        this.closeAllPanels();
      }
    });

    // 如果 resultPanelBtn 存在，設置其點擊事件
    if (this.elements.resultPanelBtn) {
      this.elements.resultPanelBtn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation(); // 防止事件冒泡
        e.currentTarget.parentElement.classList.toggle('active');
      });
    }

    // 如果 sendButton 存在，設置點擊事件
    if (this.elements.sendButton && this.elements.resultPanel) {
      this.elements.sendButton.addEventListener('click', (e) => {
        e.stopPropagation(); // 防止事件冒泡
        this.elements.sendButton.blur(); // 讓按鈕失去焦點
        document.activeElement.blur(); // 清除當前的焦點

        // 顯示結果面板
        this.elements.resultPanel.classList.add('active');

        // 如果有 resultPanelBtn，也設為 active
        if (this.elements.resultPanelBtn) {
          this.elements.resultPanelBtn.classList.add('active');
        }
      });
    }

    // 如果 resultPanel 存在，設置點擊事件
    if (this.elements.resultPanel) {
      this.elements.resultPanel.addEventListener('click', (e) => {
        e.stopPropagation(); // 阻止冒泡，防止關閉面板

        // 點擊結果面板時，確保關閉篩選面板
        if (this.elements.filterPanel) {
          this.elements.filterPanel.classList.remove('active');
        }
      });
    }

    // 如果 filterPanel 存在，設置點擊事件
    if (this.elements.filterPanel) {
      this.elements.filterPanel.addEventListener('click', (e) => {
        e.stopPropagation(); // 阻止冒泡，防止關閉面板

        if (e.target.closest('#resultPanelBtn')) {
          // 當點擊篩選面板中的結果按鈕時，關閉篩選面板
          this.elements.filterPanel.classList.remove('active');
        } else {
          // 點擊面板其他地方時保持面板開啟
          this.elements.filterPanel.classList.add('active');
        }
      });
    }
  },

  closeAllPanels() {
    // 關閉所有面板
    if (this.elements.resultPanel) {
      this.elements.resultPanel.classList.remove('active');
    }
    if (this.elements.filterPanel) {
      this.elements.filterPanel.classList.remove('active');
    }
  }
};

// 初始化面板管理器
document.addEventListener('DOMContentLoaded', () => {
  PanelManager.init();
});

function wcagAttribute() {
	const commonTags = document.querySelectorAll('#common_fac1 .tag');
	commonTags.forEach(labelTag => {
			labelTag.setAttribute('tabindex', '0');
	});

	document.body.addEventListener('keydown', function (e) {
			// 僅處理 Enter 或 Space 鍵
			if (e.key !== 'Enter' && e.key !== ' ') return;

			// 確認觸發的元素是 <label> 且具有 tabindex="0"
			const label = e.target.closest('label[tabindex="0"]');
			if (!label) return;

			// 阻止預設滾動等行為
			e.preventDefault();

			// 嘗試找到對應的 input（label 裡的 input 或 label[for] 對應的 input）
			const input = label.control || label.querySelector('input');

			if (input && !input.disabled) {
					input.click(); // 模擬點擊
			}
	});
}